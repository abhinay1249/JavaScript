Falsy Values --->> false, 0, '', NaN, undefined, null

Functions ---->> a block of code that can be reused again and again.

   ** Rules for function names ---> no reserved keywords, cannot start with number, no special characters.
   ** Variables created in the block have no global scope.
   ** Return does gets a value out of a function.
   ** Parameter does puts a value into a function.

Objects ---->> An object groups multiple values together.

   ** It can be created using {} and inside the braces it contains name:'abhinay'
      where in name is the property and abhinay is the value assigned.
   ** A dot notation is something which is used to access the value.
   ** If the dot notation is notExist then it displays undefined.
   ** We can add new property or even delete an existing property from the object.
      eg:- product.name = 'cotton socks';
           delete product.name;
   ** Why objects? Instead of declaring multiple variables we can group multiple values
      together in the form of objects.
   ** Bracket Notation = Object values can be retrieved by using the square brackets.
      eg:- products['name']; It does let us use properties that dont work with dot notation.
   ** console.log() -->> here, console is the object and log is the function so does js deals with objects
      and methods.
   ** Built in objects ---->> two types
      a. json(javascript object notation)
      b. local storage
   ** There is a lot of difference between javascript object and json object.
      js object does supports function and values are in single quotes, whereas
      json object does supports double quotes and wont work with functions.
   ** "Convert js object into Json" --->> JSON.stringify(js object) is used to convert the js object into json object.
   ** "Convert json into js object" --->> JSON.parse(json) is used to convert the json object into js object.
   ** localStorage is used to store the actions performed even after the page is refreshed.
   ** localStorage supports only strings.
   ** localStorage has methods such as .setItem() .getItem() .removeItem()
      .setItem(value1,value2) ---> is used to set the the value2 to value1.
      .getItem(value1) --->> to retreive the value[value2] stored in local storage we need to use value1 for it as retreival.
      .removeItem(value1) ---->> is used to remove the particular storage information from local storage. 
   ** When nothing exists in local storage, it gives us ''null''.
   ** Null means intentionally want something to be empty.
   ** Auto Boxing --->> It refers to the process of string to wrap in an object, it does not work with 
      null and undefined.
   **Objects for reference --->> In this place, if a object is created and the property and value is assigned
      such as const object1={
         name:'abhinay'
      }; -->> here the name abhinay is stored in computer memory whereas the object will store it reference to 
      locate it. Incase if an another object is pointed to the object1 then it wont create again in computer memory
      rather than it points to the object references from previous object.
   ** When we compare two objects it does compare the reference of it rather than the values present in it.
   ** Destructuring ---->> It is process of making a shortcut to the object property allocation to the variable
      such as:
               const message = object3.message; -->> the variable is assigned to the object property value.
               [Shortcut] const {message} = object4; -->> it means that object4 property message value is being
               assinged to the variable message through the shortcut message.
               If it contains multiple properties then it is 
                  const {message, price} = object4;
   ** Shorthand method --->> Kind of method where in the js object we can direclty create the method rather than 
      using property for it.
   ** Built-In Objects provided by js are console,math,json,localStorage.

Document Object Model ----->>  It is a built-in object in precise a document object.

   ** It is certainly linked to the webpage, by using the objects with document Object
      changes can be made to the existing webpage such as
         eg:- document.title = 'Changed Title';
              document.body.innerHTML = 'Changed body';
   ** Dom is used to combine both js and html together.
   ** document.title is used to change the title of the html page.
   ** document.body is used for the changes in the body of the webpage or even to print the info in body.
   ** document.body.innerHTML is used to control the entire html inside the body.
   ** document.querySelector() is used to get any element from the page and put it inside javascript.
   ** You had choosen a button to retrieve using querySelector what if there are multiple buttons then how to retrieve it,
      here it goes by using the class attribute in the button
      eg:- <button class="js-button">Second Button</button>
            document.querySelector('.js-button');
   ** From the above . represents the class selector even in css to style a specific thing we use . and make sure after
      dot begin with js as it will easy to identify that it belongs to js.
   ** Objects are values and can be saved in a variable.
   ** Untill now we had learnt regarding the class attribute and their retrieval method but now
      what if we have an input to be entered and there is no innerHTML to be used then we shall retrieve the value through
      ".value"
      eg:- const amount = document.querySelector('.js-cost');
            console.log(amount.value);
   ** Type Coercion =   Whenever we get a value from dom like above it is a string, even though it is a 
      number but the type of it is a string.
      But In order to convert a string into number js has a built in function called as "Number()" similar to type casting.
   ** Onkeydown is an attribute which is used to display the text in console when we does hit the keys on the keyboard.
   ** clicks, keydowns are ====>> events
   ** onclick, onkeydown ======>> event listeners
   ** event is recognised as an object in js.
   ** Every event listener gets an event object.
   ** Window object is a built in object used to represent the entire browser and by default js adds this object before 
      other built in objects.
      eg:- window.console.log("hi"); is similar to console.log("hi");
   ** Onkeydown is used to get the text in the input field to be retreived 
      "After the key is pressed".
   ** OnkeyUp is used to get the text in the input field to be retreived
      "During the keys are pressed itself"

Arrays ------>> It is an another type of value that represents a list of values.

   ** It is a special type of object in javascript.
   ** In order to check whether an array is an array or not we can do using, Array.isArray();
   ** Arrays have properties and methods.
   ** In an array, if you need to push an element to the end then use .push() method to perform.
   ** In an array, if you need to remove an element from it then use .splice(index,how many values from index) this method can perform
      remove operation.
   ** In Js there is a concept called as destructuring, where in if the variable name and the object property has same name then this concept is
      used.    eg:- const name = todoList.name;
      using destructuring const {name} = todoList;
   ** Arrays are references, if we copy an array as another array it just copies it as the reference. Array1 is copied into array2 it 
      doesnt copy array1 into array2 it just copies the references. Both the arrays point to a single array in memory.
   ** In order to avoid this behaviour, there is a scope of copying arrays using ".slice()" method which represents as two arrays in
      the memory.
         eg:- array1=[1,2,3];
               array2 = array1.slice();
   ** In loops, there are two statements called as break, continue
      break is used to break the flow of loop.
      continue is used to skip one iteration and then continue the loop.
   ** While using break and continue in while loop, the increment statement has to be used in continue usage block otherwise it may result 
      to infinite loop.

Advance Functions ------->> Functions are like values.

   ** We can save a function inside a variable.
      eg:- const variable = function greet(){
         console.log('Morning');
      }
      variable();
   ** From above we can even remove the function name and keep it like this,
      eg:- const variable = function(){
         console.log('Morning);
      }
      variable();  -->> here the function is called as anonymous function.
   ** The two main advantages of using a normal function rather than above is that,
      1. Easier to read the function.
      2. Hoisting
   ** Hoisting is the process of calling the function before itself and later the function is declared.
      eg:- hello();
            function hello(){
               console.log('hello world!');
            }
   ** We can even put a function inside the object to such as,
      eg:- const object1={
               num:3,
               fun:function(){
                  console.log('animals eat food');
               }
            }
            object1.fun();
   ** setTimeout() --->> It is used to run a function in future.
      It does consists of two parameters setTimeout(function,milliseconds);
      setTimeout(function(){
         console.log('automate function in future')
      },5000);
   ** Asynchronous code is a type of code that does executes the statement ahead even though it has a function
      that takes some time to complete and then perform.
         -->> There is a function which is set to run in 5 seconds, meanwhile there is a 
               console statement below it.
                  -->> First the console statement is printed and then the timer function is runned, due to the 
                        Asynchronous code ability
         eg:- setTimeout(function(){
                  console.log('Asynchronous test');
               },5000);

               console.log('after Asynchronous');
   ** Synchronous code is a type of flow through which each statement is executed and then proceeds to the next one.
      eg:- console.log('one');
           console.log('two');
      first one is executed and then two is done in Synchronous manner.
   ** Synchronous code does the process one after the other.
   ** Asynchronous code does the process where one runs in background still the next one is executed and then the backgorund one is displayed.
   ** setInterval() is also a built in function where in it runs the function again and again for its scheduled time.
         eg:- setInterval(function(){
            console.log('set interval run');
         },5000);
   ** In order to stop the interval,we have function called clearInterval(intervalId); For every setInterval id it genereates a unique id 
      by using it we can stop the interval.
   ** Another way to loop through the array is using .forEach() method.
   ** If we need to use the continue statement in the foreach loop then instead of continue keyword, use need to use 
      return keyword in foreach loop as it performs the continue operation in foreach loop.
   ** If we need to use break then we can go for the normal for loop itself rather than foreach loop.
   ** Arrow Functions are the shorthand and easiest way to perform the function handling.
      eg:- const func = (param1) => {
         console.log("arrow functions");
         console.log(param1);
      }
      func();
   ** addEventListener(param1,param2) where in it is used to replace the onclick attribute and perform those operations by this
      in javascript itself. param1 should be a string with the event to be performed such as onClick is a eventListener but click is a event.
      so click should be param1 and then the function to perform over there.
   ** .removeEventListener(param1,param2) used to remove the event on the click of that button the parameters are same as the 
      addEventListener itself.
   ** By using the .addEventListener() and then using the keydown process in js used to make it clear enough.
         eg:- document.body.addEventListener('keydown',(event)=>{
                  console.log(event.key);
            })


